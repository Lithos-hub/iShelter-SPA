import { UserRoleType } from '@/models';
import { getUserRoleColor, getUserRoleList, getUserRoleName, userRoleLegends } from './user';

describe('getUserRoleName_function', () => {
	// Tests that the function returns the correct translation for a valid UserRoleType.
	it('test_getUserRoleName_returns_correct_translation_for_valid_UserRoleType', () => {
		expect(getUserRoleName('admin')).toBe('Administrador');
		expect(getUserRoleName('staff_dog_walker')).toBe('Paseador de perros');
		expect(getUserRoleName('staff_socializer')).toBe('Socializador');
		expect(getUserRoleName('staff_adoption_event_volunteer')).toBe(
			'Voluntario en eventos de adopciÃ³n'
		);
		expect(getUserRoleName('staff_fundraiser')).toBe('Recaudador de fondos');
	});

	// Tests that the function returns undefined for an invalid UserRoleType.
	it('test_getUserRoleName_returns_undefined_for_invalid_UserRoleType', () => {
		expect(getUserRoleName('invalid_role' as UserRoleType)).toBeUndefined();
	});

	// Tests that the function returns undefined if the argument is null.
	it('test_getUserRoleName_returns_undefined_if_argument_is_null', () => {
		expect(getUserRoleName(null as unknown as UserRoleType)).toBeUndefined();
	});

	// Tests that the function returns undefined if the argument is an empty string.
	it('test_getUserRoleName_returns_undefined_if_argument_is_empty_string', () => {
		expect(getUserRoleName('' as UserRoleType)).toBeUndefined();
	});
});

// Generated by CodiumAI

/*
Code Analysis

Objective:
The objective of the getUserRoleList function is to generate a list of user roles with their corresponding labels and values. This function uses the userRoleLegends array and the getUserRoleName function to map the name and label of each user role.

Inputs:
- None

Flow:
1. The function calls the map method on the userRoleLegends array.
2. For each object in the array, it extracts the name property.
3. It then calls the getUserRoleName function with the name as an argument to get the label.
4. It returns an object with the label and name as properties for each user role.

Outputs:
- An array of objects containing the label and value of each user role.

Additional aspects:
- The getUserRoleList function is dependent on the userRoleLegends array and the getUserRoleName function.
- The function does not modify any of the input data.
*/

describe('getUserRoleList_function', () => {
	// Tests that the function returns an array of objects with label and value properties.
	it('test_getUserRoleList_returns_array_of_objects_with_label_and_value_properties', () => {
		const result = getUserRoleList();
		expect(Array.isArray(result)).toBe(true);
		expect(result.length).toBe(userRoleLegends.length);
		result.forEach((item) => {
			expect(item).toHaveProperty('label');
			expect(item).toHaveProperty('value');
		});
	});
});

describe('getUserRoleColor_function', () => {
	// Tests that providing a valid UserRoleType returns the corresponding color.
	it('test_valid_user_role_type_returns_corresponding_color', () => {
		const result = getUserRoleColor('admin');
		expect(result).toEqual('bg-[#264653] text-white font-bold');
	});

	// Tests that providing an invalid UserRoleType returns undefined.
	it('test_invalid_user_role_type_returns_undefined', () => {
		const result = getUserRoleColor('invalid_role' as UserRoleType);
		expect(result).toBeUndefined();
	});

	// Tests that the function returns a string.
	it('test_function_returns_string', () => {
		const result = getUserRoleColor('staff_socializer');
		expect(typeof result).toBe('string');
	});

	// Tests that providing an empty input returns undefined.
	it('test_empty_input_returns_undefined', () => {
		const result = getUserRoleColor('' as UserRoleType);
		expect(result).toBeUndefined();
	});

	// Tests that providing a null input returns undefined.
	it('test_null_input_returns_undefined', () => {
		const result = getUserRoleColor(null as unknown as UserRoleType);
		expect(result).toBeUndefined();
	});
});
